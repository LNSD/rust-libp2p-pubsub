syntax = "proto3";

package libp2p.pubsub.v1;

//! Libp2p Pubsub protobuf definitions.
//!
//! Current definitions are based on libp2p Pubsub and Gossipsub specs.
//! See for more details:
//!  - https://github.com/libp2p/specs/tree/master/pubsub/README.md#the-rpc
//!  - https://github.com/libp2p/specs/tree/master/pubsub/README.md#the-message
//!  - https://github.com/libp2p/specs/tree/master/pubsub/README.md#the-topic-descriptor
//!  - https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.0.md#protobuf

/*
 * Communication between peers happens in the form of exchanging protobuf `Frame` messages between participating
 * peers.
 *
 * The `Frame` message is a relatively simple protobuf message containing zero or more subscription action messages,
 * zero or more data messages, or zero or more control messages.
 */
message Frame {
  /*
   * Subscription action messages.
   */
  repeated SubOpts subscriptions = 1;
  /*
   * Data messages.
   */
  repeated Message publish = 2;
  /*
   * Control messages.
   */
  optional ControlMessage control = 3;
}

/*
 * The `SubOpts` message is used to subscribe or unsubscribe from a topic.
 */
message SubOpts {
  /*
   *  The `subscribe` field indicates whether the message is a subscription or unsubscription.
   */
  optional bool subscribe = 1;

  /*
   * The `topic_id` field specifies the topic that the message is subscribing or unsubscribing from.
   */
  optional string topic_id = 2;
}

message Message {
  /*
   * The `from` field (optional) denotes the author of the message.
   *
   * This is the peer who initially authored the message, and NOT the peer who propagated it. Thus, as the message is
   * routed through a swarm of pubsubbing peers, the original authorship is preserved.
   */
  optional bytes from = 1;

  /*
   * The `data` field (optional) contains the payload of the message.
   *
   * This is an opaque byte array, whose contents are not interpreted by pubsub. The maximum size of a message is
   * determined by the pubsub implementation.
   */
  optional bytes data = 2;

  /*
   * The `seqno` field (optional) contains a sequence number for the message.
   *
   * No two messages on a pubsub topic from the same peer have the same `seqno` value, however messages from
   * different peers may have the same sequence number. In other words, this number is not globally unique.
   *
   * This is an opaque byte array, whose contents are not interpreted by pubsub. The maximum size of a sequence number
   * is determined by the pubsub implementation.
   */
  optional bytes seqno = 3;

  /*
   * The `topic` field specifies the topic that the message should be published to.
   */
  string topic = 4;

  /*
   * The `signature` field (optional) contains a signature of the message.
   *
   * This is an opaque byte array, whose contents are not interpreted by pubsub. The maximum size of a signature is
   * determined by the pubsub implementation.
   */
  optional bytes signature = 5;

  /*
   * The `key` field (optional) contains a public key that can be used to verify the signature.
   *
   * This is an opaque byte array, whose contents are not interpreted by pubsub. The maximum size of a key is
   * determined by the pubsub implementation.
   */
  optional bytes key = 6;
}

/*
 * The `ControlMessage` message is used to send control messages between peers.
 *
 * It contains one or more control messages.
 */
message ControlMessage {
  /*
   * The `ihave` field contains a list of `ControlIHave` messages.
   */
  repeated ControlIHave ihave = 1;
  /*
   * The `iwant` field contains a list of `ControlIWant` messages.
   */
  repeated ControlIWant iwant = 2;
  /*
   * The `graft` field contains a list of `ControlGraft` messages.
   */
  repeated ControlGraft graft = 3;
  /*
   * The `prune` field contains a list of `ControlPrune` messages.
   */
  repeated ControlPrune prune = 4;
}

/*
 * The `ControlIHave` message is used to advertise messages that a peer has.
 *
 * It provides the remote peer with a list of messages that were recently seen by the local router. The remote peer
 * may then request the full message content with a `ControlIWant` message.
 */
message ControlIHave {
  /*
   * The `topic_id` field specifies the topic that the message IDs are for.
   */
  optional string topic_id = 1;
  /*
   * The `message_ids` field contains a list of message IDs that the local peer has.
   */
  repeated bytes message_ids = 2;
}

/*
 * The `ControlIWant` message is used to request messages from a peer.
 *
 * It provides the remote peer with a list of messages that the local peer is interested in. The requested messages IDs
 * are those that were previously announced by the remote peer in an `ControlIHave` message. The remote peer may then
 * send the full message content with a `Message` message.
 */
message ControlIWant {
  /*
   * The `message_ids` field contains a list of message IDs that the local peer is interested in.
   */
  repeated bytes message_ids = 1;
}

/*
 * The `ControlGraft` message is grafts a new link in a topic mesh.
 *
 * The `ControlGraft` message informs a peer that it has been added to the local router's mesh view for the included
 * topic id.
 */
message ControlGraft {
  /*
   * The `topic_id` field specifies the topic that the message is grafting to.
   */
  optional string topic_id = 1;
}

/*
 * The `ControlPrune` message is used to prune a link from a topic mesh.
 *
 * The `ControlPrune` message informs a peer that it has been removed from the local router's mesh view for the
 * included topic id.
 */
message ControlPrune {
  /*
   * The `topic_id` field specifies the topic that the message is pruning from.
   */
  optional string topic_id = 1;

  /*
   * The `peers` field contains a list of `PeerInfo` messages.
   *
   * It is part of the gossipsub v1.1 Peer eXchange (PX) protocol extension.
   */
  repeated PeerInfo peers = 2; // gossipsub v1.1 PX

  /*
   * The `backoff` field specifies the time (in seconds) that the remote peer should wait before attempting to
   * re-graft.
   */
  optional uint64 backoff = 3;
}

/*
 * The `PeerInfo` message is used to provide information about a peer.
 *
 * It contains the peer's ID and a signed peer record.
 */
message PeerInfo {
  optional bytes peer_id = 1;
  optional bytes signed_peer_record = 2;
}

